package Tests;

public class TestStringClass {
    
    
}

/*
Основные методы класса String
Основные операции со строками раскрывается через методы класса String, среди которых можно выделить следующие:


Поскольку строка рассматривается как набор символов, то мы можем применить метод length() для нахождения длины строки или длины набора символов:


String str1 = "Java";
System.out.println(str1.length()); // 4
А с помощью метода toCharArray() можно обратно преобразовать строку в массив символов:


String str1 = new String(new char[] {'h', 'e', 'l', 'l', 'o'});
char[] helloArray = str1.toCharArray();
Строка может быть пустой. Для этого ей можно присвоить пустые кавычки или удалить из стоки все символы:


String s = "";   // строка не указывает на объект
if(s.length() == 0) System.out.println("String is empty");
В этом случае длина строки, возвращаемая методом length(), равна 0.

Класс String имеет специальный метод, который позволяет проверить строку на пустоту - isEmpty(). Если строка пуста, он возвращает true:


String s = "";   // строка не указывает на объект
if(s.length() == 0) System.out.println("String is empty");
Переменная String может не указывать на какой-либо объект и иметь значение null:


String s = null;   // строка не указывает на объект
if(s == null) System.out.println("String is null");
Значение null не эквивалентно пустой строке. Например, в следующем случае мы столкнемся с ошибкой выполнения:


String s = null;   // строка не указывает на объект
if(s.length()==0) System.out.println("String is empty");    // ! Ошибка
Так как переменная не указывает ни на какой объект String, то соответственно мы не можем обращаться к методам объекта String. Чтобы избежать подобных ошибок, можно предварительно проверять строку на null:


String s = null;   // строка не указывает на объект
if(s!=null && s.length()==0) System.out.println("String is empty");

---------------------------------------------------------------------------------------------------------------------------------------

split
Для разделения строки на подстроки применяется метод split(). В качестве параметра он может принимать регулярное выражение, которое представляет критерий разделения строки.

Например, разделим предложение на слова:


String text = "FIFA will never regret it";
String[] words = text.split("\\s*(\\s|,|!|\\.)\\s*");
for(String word : words){
    System.out.println(word);
}

----------------------------------------------------------------------------------------------

Метод substring() обрезает строку с определенного индекса до конца, либо до определенного индекса:

StringBuffer strBuffer = new StringBuffer("hello java!");
String str1 = strBuffer.substring(6); // обрезка строки с 6 символа до конца
System.out.println(str1); //java!
         
String str2 = strBuffer.substring(3, 9); // обрезка строки с 3 по 9 символ 
System.out.println(str2); //lo jav


--------------------------------------------------------------------------------------------------


split() позволяет разбить строку на подстроки по определенному разделителю. Разделитель - какой-нибудь символ или набор символов передается в качестве параметра в метод. Например, разобьем текст на отдельные слова:

String text = "FIFA will never regret it";
String[] words = text.split(" ");
for(String word : words){
    System.out.println(word);     
    
//FIFA
will
never
regret
it
}
-----------------------------------------------------------------------------------------

concat(): объединяет строки

String str1 = "Java";
String str2 = "Hello";
str2 = str2.concat(str1); // HelloJava

-----------------------------------------------------------------------------------------------

valueOf(): преобразует объект в строковый вид


--------------------------------------------------------------------------------------------

join(): соединяет строки с учетом разделителя

String str1 = "Java";
String str2 = "Hello";
String str3 = String.join(" ", str2, str1); // Hello Java

----------------------------------------------------------------------------------------------------------

сompare(): сравнивает две строки


И еще одна пара методов int compareTo(String str) и int compareToIgnoreCase(String str) также позволяют сравнить две строки, но при этом они также позволяют узнать больше ли одна строка, чем другая или нет. Если возвращаемое значение больше 0, то первая строка больше второй, если меньше нуля, то, наоборот, вторая больше первой. Если строки равны, то возвращается 0.

Для определения больше или меньше одна строка, чем другая, используется лексикографический порядок. То есть, например, строка "A" меньше, чем строка "B", так как символ 'A' в алфавите стоит перед символом 'B'. Если первые символы строк равны, то в расчет берутся следующие символы. Например:


String str1 = "hello";
String str2 = "world";
String str3 = "hell";
         
System.out.println(str1.compareTo(str2)); // -15 - str1 меньше чем strt2
System.out.println(str1.compareTo(str3)); // 1 - str1 больше чем str3

------------------------------------------------------------------------------------------------
charAt(): возвращает символ строки по индексу

String str = "Java";
char c = str.charAt(2);
System.out.println(c); // v

-----------------------------------------------------------------------------------------------------

getChars(): возвращает группу символов

Метод getChars() получает набор символов между определенными индексами:


StringBuffer strBuffer = new StringBuffer("world");
int startIndex = 1;
int endIndex = 4;
char[] buffer = new char[endIndex-startIndex];
strBuffer.getChars(startIndex, endIndex, buffer, 0);
System.out.println(buffer); // orl


------------------------------------------------------------------------------------------------

equals(): сравнивает строки с учетом регистра
equalsIgnoreCase(): сравнивает строки без учета регистра
В отличие от сравнения числовых и других данных примитивных типов для строк не применяется знак равенства ==. 
Вместо него надо использовать метод equals().

String str1 = "Hello";
String str2 = "hello";
         
System.out.println(str1.equals(str2)); // false
System.out.println(str1.equalsIgnoreCase(str2)); // true

------------------------------------------------------------------------------------------------

regionMatches(): сравнивает подстроки в строках

boolean regionMatches(int toffset, String other, int oofset, int len)
boolean regionMatches(boolean ignoreCase, int toffset, String other, int oofset, int len)

Метод принимает следующие параметры:

ignoreCase: надо ли игнорировать регистр символов при сравнении. Если значение true, регистр игнорируется

toffset: начальный индекс в вызывающей строке, с которого начнется сравнение

other: строка, с которой сравнивается вызывающая

oofset: начальный индекс в сравниваемой строке, с которого начнется сравнение

len: количество сравниваемых символов в обеих строках

Используем метод:


String str1 = "Hello world";
String str2 = "I work";
boolean result = str1.regionMatches(6, str2, 2, 3);
System.out.println(result); // true
В данном случае метод сравнивает 3 символа с 6-го индекса первой строки ("wor") и 3 символа со 2-го индекса второй строки ("wor"). Так как эти подстроки одинаковы, то возвращается true.


------------------------------------------------------------------------------------------------

indexOf(): находит индекс первого вхождения подстроки в строку

Метод indexOf() находит индекс первого вхождения подстроки в строку, а метод lastIndexOf() - индекс последнего вхождения. Если подстрока не будет найдена, то оба метода возвращают -1:


String str = "Hello world";
int index1 = str.indexOf('l'); // 2
int index2 = str.indexOf("wo"); //6
int index3 = str.lastIndexOf('l'); //9


------------------------------------------------------------------------------------------------
lastIndexOf(): находит индекс последнего вхождения подстроки в строку

------------------------------------------------------------------------------------------------

startsWith(): определяет, начинается ли строка с подстроки
Метод startsWith() позволяют определить начинается ли строка с определенной подстроки, а метод endsWith() позволяет определить заканчивается строка на определенную подстроку:


String str = "myfile.exe";
boolean start = str.startsWith("my"); //true
boolean end = str.endsWith("exe"); //true

------------------------------------------------------------------------------------------------

endsWith(): определяет, заканчивается ли строка на определенную подстроку

 а метод endsWith() позволяет определить заканчивается строка на определенную подстроку:


String str = "myfile.exe";
boolean start = str.startsWith("my"); //true
boolean end = str.endsWith("exe"); //true

------------------------------------------------------------------------------------------------

replace(): заменяет в строке одну подстроку на другую

String str = "Hello world";
String replStr1 = str.replace('l', 'd'); // Heddo wordd
String replStr2 = str.replace("Hello", "Bye"); // Bye world

------------------------------------------------------------------------------------------------

trim(): удаляет начальные и конечные пробелы

String str = "  hello world  ";
str = str.trim(); // hello world 

------------------------------------------------------------------------------------------------

substring(): возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса

String str = "Hello world";
String substr1 = str.substring(6); // world
String substr2 = str.substring(3,5); //lo


------------------------------------------------------------------------------------------------

toLowerCase(): переводит все символы строки в нижний регистр

String str = "Hello World"; 
System.out.println(str.toLowerCase()); // hello world
System.out.println(str.toUpperCase()); // HELLO WORLD

------------------------------------------------------------------------------------------------

toUpperCase(): переводит все символы строки в верхний регистр */

//String str = "Hello World"; 
//System.out.println(str.toLowerCase()); // hello world
//System.out.println(str.toUpperCase()); // HELLO WORLD

